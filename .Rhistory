library(devtools)
install.packages("devtools")
library(devtools)
build_github_devtools()
library(devtools)
install.packages("devtools.zip", repos = NULL)
library(devtools)
library(devtools)
build_git_devtools
build_git_devtools()
devtools::install_github("statsbomb/StatsBombR")
install.packages("remotes")
remotes::install_version("SDMTools", "1.1-221")
install.packages("remotes")
remotes::install_version("SDMTools", "1.1-221")
rtools
library(rtools)
devtools::install_github("statsbomb/StatsBombR")
find_rtools(T)
library(devtools)
library(devtools)
find_rtools(T)
install.packages(installr)
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
if(!require(installr)) {
+     install.packages("installr");
+     require(installr)
+ } #load / install+load installr
updateR()
library(devtools)
updateR()
library(installr)
updateR()
library(StatsBombR)
AllMatches <- FreeMatches(filter(FreeCompetitions(), competition_id==11 & season_id==22))
View(AllMatches)
colnames(AllMatches)
Matches <- filter(AllMatches, home_team.home_team_name=="Barcelona" | away_team.away_team_name=="Barcelona")
View(Matches)
EventData<-StatsBombFreeEvents(MatchesDF = AllMatches, Parallel = T)
EventData<-StatsBombFreeEvents(MatchesDF = AllMatches)
EventData<-StatsBombFreeEvents(MatchesDF = "AllMatches"All, Parallel = T)
EventData<-StatsBombFreeEvents(MatchesDF = "All", Parallel = T)
EventData
AllData <- free_allevents()
AllData
get.matchFree(Matches[1,])
get.matchFree(Matches[1,])m <-
m <- get.matchFree(Matches[1,])
View(m)
Match <- get.matchFree(Matches[28,])
View(Match)
View(Matches)
PassData <- subset(Match, Match$type.name=="Pass")
Data <- PassData[c("id","player.name","pass.length","pass.recipient.name","location.x","location.y","pass.end_location.x","pass.end_location.y")]
subsetFunc = c("id","player.name","pass.length","pass.recipient.name","location.x","location.y","pass.end_location.x","pass.end_location.y")
Data
Data = PassData[subsetFunc]
View(allclean(PassData))
View(allclean(Match))
View(Pass)
View(PassData)
subsetFunc = c("id","player.name","pass.length","pass.angle","pass.recipient.name","pass.end_location")
Data = PassData[subsetFunc]
View(Data)
subsetFunc = c("id","player.name","pass.length","pass.angle","pass.end_location","pass.recipient.name","team.name")
Data = PassData[subsetFunc]
View(Data)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/load_data.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/pca.R")
data <- get_data("Big5")
pca <- get_pca_model(data)
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/load_data.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/pca.R")
# Player comp
player_comp_fun <- function(final, base.player) {
comp <- final[final$Player==base.player,]
if (base.player=="Rodri") {
print("Multiple players, default to Machester City")
comp <- comp[comp$Squad=="Manchester City",]
}
distance <- c()
for (r in 1:nrow(final)) {
x <- (comp$PCA1-final$PCA1[r])**2
y <- (comp$PCA2-final$PCA2[r])**2
distance <- c(distance, sqrt(x+y))
}
final$comp <- distance
position <- final[comp$Pos[1]==final$Pos,]   #grep(comp$Pos[1], final$Pos)>0,]
if (grepl(",", comp$Pos[1])>0) {
vec <- lapply(strsplit("MF,DF", ",")[[1]], function(p) {subset(final, Pos==p)})
temp <- data.frame()
for (d in vec) {
temp <- rbind(temp, d)
}
position <- rbind(position, temp)
}
position$comp.percent <- 1-(position$comp/max(position$comp))
position <- position %>% arrange(comp, desc(T))
position.25 <- position[2:26,]
ggplot(position.25, aes(x=1:25, y=comp.percent)) +
scale_x_reverse() +
coord_flip() +
xlab(base.player) +
ylab("Similarity %") +
geom_col(alpha=1-(position.25$Age-min(position.25$Age)+1)/(max(position.25$Age)-15), col="Black") +   # fill="Blue"
geom_text(aes(label=Player), y=0.33)
#return(position.25)
}
data <- get_data("Big5")
pca <- get_pca_model(data)
View(data)
data <- get_data("Big5")
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Add cluster to postion dataframes
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
# Save each cluster separately
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Add cluster to postion dataframes
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
# Save each cluster separately
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
view.cluster.df(fw, 1)
test.kmeans(mf)
test.kmeans(df)
test.kmeans(fw)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Add cluster to postion dataframes
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
# Save each cluster separately
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
view.cluster.df(fw, 1)
view.cluster.df(mf, 2)
view.cluster.df(mf, 1)
view.cluster.df(mf, 7)
view.cluster.df(mf, 6)
view.cluster.df(mf, 3)
view.cluster.df(fw, 1)
view.cluster.df(fw, 2)
view.cluster.df(fw, 8)
view.cluster.df(fw, 4)
view.cluster.df(fw, 7)
view.cluster.df(fw, 4)
view.cluster.df(df, 11)
view.cluster.df(df, 2)
view.cluster.df(mf, 11)
view.cluster.df(mf, 1)
view.cluster.df(mf, 11)
view.cluster.df(mf, 2)
view.cluster.df(df, 3)
view.cluster.df(df, 10)
view.cluster.df(df, 1)
view.cluster.df(df, 8)
view.cluster.df(df, 7)
view.cluster.df(df, 5)
view.cluster.df(df, 9)
view.cluster.df(df, 11)
