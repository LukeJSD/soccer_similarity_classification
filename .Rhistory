library(devtools)
install.packages("devtools")
library(devtools)
build_github_devtools()
library(devtools)
install.packages("devtools.zip", repos = NULL)
library(devtools)
library(devtools)
build_git_devtools
build_git_devtools()
devtools::install_github("statsbomb/StatsBombR")
install.packages("remotes")
remotes::install_version("SDMTools", "1.1-221")
install.packages("remotes")
remotes::install_version("SDMTools", "1.1-221")
rtools
library(rtools)
devtools::install_github("statsbomb/StatsBombR")
find_rtools(T)
library(devtools)
library(devtools)
find_rtools(T)
install.packages(installr)
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
} #load / install+load installr
updateR()
updateR()
if(!require(installr)) {
+     install.packages("installr");
+     require(installr)
+ } #load / install+load installr
updateR()
library(devtools)
updateR()
library(installr)
updateR()
library(StatsBombR)
AllMatches <- FreeMatches(filter(FreeCompetitions(), competition_id==11 & season_id==22))
View(AllMatches)
colnames(AllMatches)
Matches <- filter(AllMatches, home_team.home_team_name=="Barcelona" | away_team.away_team_name=="Barcelona")
View(Matches)
EventData<-StatsBombFreeEvents(MatchesDF = AllMatches, Parallel = T)
EventData<-StatsBombFreeEvents(MatchesDF = AllMatches)
EventData<-StatsBombFreeEvents(MatchesDF = "AllMatches"All, Parallel = T)
EventData<-StatsBombFreeEvents(MatchesDF = "All", Parallel = T)
EventData
AllData <- free_allevents()
AllData
get.matchFree(Matches[1,])
get.matchFree(Matches[1,])m <-
m <- get.matchFree(Matches[1,])
View(m)
Match <- get.matchFree(Matches[28,])
View(Match)
View(Matches)
PassData <- subset(Match, Match$type.name=="Pass")
Data <- PassData[c("id","player.name","pass.length","pass.recipient.name","location.x","location.y","pass.end_location.x","pass.end_location.y")]
subsetFunc = c("id","player.name","pass.length","pass.recipient.name","location.x","location.y","pass.end_location.x","pass.end_location.y")
Data
Data = PassData[subsetFunc]
View(allclean(PassData))
View(allclean(Match))
View(Pass)
View(PassData)
subsetFunc = c("id","player.name","pass.length","pass.angle","pass.recipient.name","pass.end_location")
Data = PassData[subsetFunc]
View(Data)
subsetFunc = c("id","player.name","pass.length","pass.angle","pass.end_location","pass.recipient.name","team.name")
Data = PassData[subsetFunc]
View(Data)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Add cluster to postion dataframes
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
# Save each cluster separately
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
diff_ <- abs(pca.mf$scores[,1]-pca.mf$scores[,2])
View(cbind(pca.mf$scores[,1:2], diff_))
data.frame(cbind(pca.mf$scores[,1:2], diff_))
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
# Create models
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
# Add cluster to postion dataframes
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
# Save each cluster separately
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
