for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs
View(df)
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
View(stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols])
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs
View(df)
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y <- stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
View(stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols])
View(y)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
data.mls <- get_data("Big5")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
View(df)
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
View(y)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("Big5")
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
View(df)
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
View(stat.dfs[[x]])
View(y)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
print(x)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
View(stat.dfs[[7]])
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
print(x)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
if (i==7) {
print(i)
print(stat.types[i])
View(new.df)
}
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
print(x)
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
View(df)
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
get_data <- function(league) {# Load data
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
print(names(df))
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
return(data)
}
data.mls <- get_data("MLS")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
info.features
info.features
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
data.mls <- get_data("MLS")
data.mls.final <- get_pca_model(data.mls)
View(get_position_results)
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
View(data.mls)
View(data.final.mf)
View(data.mls)
