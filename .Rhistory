df <- df %>% select(!names(df)[grepl("90", names(df)))
if (league=="Big5") {
info.features <- c("Rk", "Player", "id", "Nation", "Pos", "Squad", "Comp", "Age", "Born")
} else if (league=="MLS") {
info.features <- c("Rk", "Player", "Nation", "Pos", "Squad", "Age", "Born")
}
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Make per 90
df <- df %>% select(!names(df)[grepl("90", names(df))])
df[,names(df)[!names(df) %in% c("MP", "Starts, Min")]] <- (df[,names(df)[!names(df) %in% c("MP", "Starts, Min")]]/df$Min)*90
if (league=="Big5") {
info.features <- c("Rk", "Player", "id", "Nation", "Pos", "Squad", "Comp", "Age", "Born")
} else if (league=="MLS") {
info.features <- c("Rk", "Player", "Nation", "Pos", "Squad", "Age", "Born")
}
stat.types <- c("standard", "defense", "gca", "misc", "passing", "passing_types", "possession", "shooting")
stat.dfs <- c()
for (i in seq_along(stat.types)) {
n <- paste("C:/Users/luke/Personal_Projects/Soccer/Similarity/Data/", league, sep = "")
n <- paste(n, stat.types[i], sep="/")
n <- paste(n, ".csv", sep = "")
new.df <- read.csv(n)
new.df <- new.df[new.df$Rk!="Rk",]
stat.dfs[[i]] <- new.df
}
# Combine data
df = stat.dfs[[1]]
for (x in 2:length(stat.types)) {
cols = names(stat.dfs[[x]])[!(names(stat.dfs[[x]]) %in% names(df))]
y = stat.dfs[[x]][,(names(stat.dfs[[x]])) %in% cols]
df <- cbind(df, y)
}
# Set threshold
df <- subset(df, Min>450)
# Remove GK
df <- subset(df, Pos!="GK")
# Remove general info, non-statistical features
info <- df[,info.features]
df <- df[,!(names(df)) %in% c("matches", names(info))]
# Ensure there are no repeated features
temp_dataset <- data.frame(cols = names(df))
regexes <- c()
for (j in 1:length(stat.types)) {
regexes <- c(regexes, paste(j, "$", sep = ""))
}
cols2d <- lapply(regexes, function(rx) {subset(temp_dataset, grepl(rx, cols))})
cols1d <- c()
for (ls in cols2d) {
cols1d <- c(cols1d, ls$cols)
}
df <- df[,!(names(df)) %in% cols1d]
# Drop rows with lots of na values
info <- info[!is.na(df$Sh),]
df <- df[!is.na(df$Sh),]
# Replace logically na values with -0.1 (probably want better replacement)
for (c in names(df)[colSums(is.na(df)) > 0]) {
df[is.na(df[,c]),c] <- -0.1
}
# Ensure all data is numerical
df <- df %>% select(where(is.numeric))
# Make per 90
minutes <- df$Min
X90s <- df$X90s
df <- df %>% select(!names(df)[grepl("90", names(df)) | "Min"==names(df)])
df[,names(df)[!names(df) %in% c("MP", "Starts, Min")]] <- (df[,names(df)[!names(df) %in% c("MP", "Starts, Min")]]/df$Min)*90
df["X90s"] <- X90s
# Normalize Data (might need different method)
df = scale(df)
# Recombine dataframes
data <- cbind(info, df)
View(data)
library(ggfortify)
library(ggfortify)
set.seed(123)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
rlang::last_trace()
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/r_similar.R")
test.kmeans <- function(df, kmax=20) {
wss <- c()
for (k in 1:kmax) {
km <- kmeans(df[,c("PCA1", "PCA2")], k)
wss <- c(wss, km$tot.withinss)
}
plot(ggplot()+geom_line(aes(x=1:20, y=wss)))
}
get.kmeans.model <- function(df, k) {
# k=5 # DF
# k=5 # MF
# k=7 # FW
km <- kmeans(df[,c("PCA1", "PCA2")], k)
return(km)
}
plot.kmeans <- function(df, km, position) {
df["cluster"] <- km$cluster
k.pos <- df[,c("PCA1", "PCA2")]
k.pos["cluster"] <- km$cluster
gplt <- ggplot(data=k.pos,
aes(
x=PCA1,
y=PCA2,
color=factor(k.pos$cluster),
fill=factor(k.pos$cluster)
)
) +
geom_point() +
stat_ellipse(geom = "polygon", alpha=0.3) +
labs(title=paste(position, length(km$size), sep = ", k = ")) +
theme(
legend.text = element_blank(),
legend.position = "none"
) +
annotate("text", label=1:length(km$size), x=km$centers[,"PCA1"], y=km$centers[,"PCA2"], color="black")
plot(gplt)
}
view.cluster.df <- function(df, cluster_number){
View(df %>% filter(cluster==cluster_number) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster))
}
save.kmeans.plot <- function(pos) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
}
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
png(paste(getwd(), paste(paste("Clusters", pos, sep="/"), ".png", sep="_kmeans"), sep="/"))
plot.kmeans(data, km.res, pos)
dev.off()
}
get.pca.scores <- function(position) {
if (position=="MF") {
return(data.frame(pca.mf$scores[,1:2]) %>% arrange(desc(Comp.1)))
} else if (position=="DF") {
return(data.frame(pca.df$scores[,1:2]) %>% arrange(desc(Comp.1)))
} else if (position=="FW") {
return(data.frame(pca.fw$scores[,1:2]) %>% arrange(desc(Comp.1)))
}
}
get.data.w_cluster <- function(pos) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
}
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
data["cluster"] <- km.res$cluster
return(data)
}
for (p in c("DF", "MF", "FW")) {
save.kmeans.plot(p)
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
View(data.final)
View(get.data.w_cluster("MF") %>% select(Player, Squad, Nation, PCA1, PCA2 cluster))
View(get.data.w_cluster("MF") %>% select(Player, Squad, Nation, PCA1, PCA2, cluster))
view.cluster.df(get.data.w_cluster("MF"), 1)
test.kmeans(data.final.mf %>% filter(grepl("MF", Pos)))
test.kmeans(data.final.df %>% filter(grepl("DF", Pos)))
test.kmeans <- function(df, kmin=1, kmax=20) {
wss <- c()
for (k in kmin:kmax) {
km <- kmeans(df[,c("PCA1", "PCA2")], k)
wss <- c(wss, km$tot.withinss)
}
plot(ggplot()+geom_line(aes(x=1:20, y=wss)))
}
test.kmeans(data.final.mf %>% filter(grepl("MF", Pos)))
test.kmeans(data.final.df %>% filter(grepl("DF", Pos)))
test.kmeans(data.final.fw %>% filter(grepl("FW", Pos)))
save.kmeans.plot <- function(pos) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
k <- 11
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
k <- 7
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
k<-10
}
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
png(paste(getwd(), paste(paste("Clusters", pos, sep="/"), ".png", sep="_kmeans"), sep="/"))
plot.kmeans(data, km.res, pos)
dev.off()
}
get.data.w_cluster <- function(pos) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
k <- 11
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
k <- 7
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
k <- 10
}
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
data["cluster"] <- km.res$cluster
return(data)
}
view.cluster.df(get.data.w_cluster("MF"), 1)
mf <- get.data.w_cluster("MF")
df <- get.data.w_cluster("DF")
fw <- get.data.w_cluster("FW")
view.cluster.df(mf, 1)
plot.kmeans <- function(df, km, position, finished.df=NULL) {
if (is.null(finished.df)) {
df["cluster"] <- km$cluster
k.pos <- df[,c("PCA1", "PCA2")]
k.pos["cluster"] <- km$cluster
} else {
k.pos <- finished.df
}
gplt <- ggplot(data=k.pos,
aes(
x=PCA1,
y=PCA2,
color=factor(k.pos$cluster),
fill=factor(k.pos$cluster)
)
) +
geom_point() +
stat_ellipse(geom = "polygon", alpha=0.3) +
labs(title=paste(position, length(km$size), sep = ", k = ")) +
theme(
legend.text = element_blank(),
legend.position = "none"
) +
annotate("text", label=1:length(km$size), x=km$centers[,"PCA1"], y=km$centers[,"PCA2"], color="black")
plot(gplt)
}
plot.kmeans <- function(df, position, km=NULL, finished.df=NULL) {
if (is.null(finished.df)) {
df["cluster"] <- km$cluster
k.pos <- df[,c("PCA1", "PCA2")]
k.pos["cluster"] <- km$cluster
} else {
k.pos <- finished.df
}
gplt <- ggplot(data=k.pos,
aes(
x=PCA1,
y=PCA2,
color=factor(k.pos$cluster),
fill=factor(k.pos$cluster)
)
) +
geom_point() +
stat_ellipse(geom = "polygon", alpha=0.3) +
labs(title=paste(position, length(km$size), sep = ", k = ")) +
theme(
legend.text = element_blank(),
legend.position = "none"
) +
annotate("text", label=1:length(km$size), x=km$centers[,"PCA1"], y=km$centers[,"PCA2"], color="black")
plot(gplt)
}
plot.kmeans(NULL, "MF", finished.df = mf)
rlang::last_trace()
plot.kmeans <- function(df, position, km=NULL, finished.df=NULL) {
if (is.null(finished.df)) {
df["cluster"] <- km$cluster
k.pos <- df[,c("PCA1", "PCA2")]
k.pos["cluster"] <- km$cluster
} else {
k.pos <- finished.df[,c("PCA1", "PCA2", "cluster")]
}
gplt <- ggplot(data=k.pos,
aes(
x=PCA1,
y=PCA2,
color=factor(k.pos$cluster),
fill=factor(k.pos$cluster)
)
) +
geom_point() +
stat_ellipse(geom = "polygon", alpha=0.3) +
labs(title=paste(position, length(km$size), sep = ", k = ")) +
theme(
legend.text = element_blank(),
legend.position = "none"
) +
annotate("text", label=1:length(km$size), x=km$centers[,"PCA1"], y=km$centers[,"PCA2"], color="black")
plot(gplt)
}
plot.kmeans(NULL, "MF", finished.df = mf)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
km.models <- c()
for (p in c("DF", "MF", "FW")) {
km.models <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
get.data.w_cluster <- function(pos, mod=NULL) {
if (is.null(mod)) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
k <- 11
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
k <- 7
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
k <- 10
}
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
} else {
km.res <- mod
}
data["cluster"] <- km.res$cluster
return(data)
}
mf <- get.data.w_cluster("", km.models[2])
df <- get.data.w_cluster("", km.models[1])
get.data.w_cluster <- function(pos, mod=NULL) {
if (pos=="MF") {
data <- data.final.mf %>% filter(grepl(pos, Pos))
k <- 5
k <- 11
} else if (pos=="DF") {
data <- data.final.df %>% filter(grepl(pos, Pos))
k <- 5
k <- 7
} else if (pos=="FW") {
data <- data.final.fw %>% filter(grepl(pos, Pos))
k <- 7
k <- 10
}
if (is.null(mod)) {
# test.kmeans(data)
km.res <- get.kmeans.model(data, k)
} else {
km.res <- mod
}
data["cluster"] <- km.res$cluster
return(data)
}
mf <- get.data.w_cluster("", km.models[2])
df <- get.data.w_cluster("", km.models[1])
mf <- get.data.w_cluster("MF", km.models[2])
df <- get.data.w_cluster("DF", km.models[1])
fw <- get.data.w_cluster("FW", km.models[1])
fw <- get.data.w_cluster("FW", km.models[3])
view.cluster.df(fw, 1)
View(fw)
view.cluster.df(mf, 1)
df %>% filter(cluster==cluster_number)
cluster_number <- 1
df <- mf
df %>% filter(cluster==cluster_number)
km.mf <- km.models[2]
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
km.models <- c()
for (p in c("DF", "MF", "FW")) {
km.models <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
km.models <- c()
for (p in c("DF", "MF", "FW")) {
km.models <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
View(km.models)
where(c("DF", "MF", "FW")=="MF")
which(c("DF", "MF", "FW")=="MF")
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
View(km.models)
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
view.cluster.df(fw, 1)
setwd("C:/Users/luke/Personal_Projects/Soccer/Similarity/")
source("C:/Users/luke/Personal_Projects/Soccer/Similarity/kmeans_grouping_players.R")
km.models <- NULL
for (p in c("DF", "MF", "FW")) {
km.models[[which(c("DF", "MF", "FW")==p)]] <- c(km.models, save.kmeans.plot(p))
write.csv(get.pca.scores(p), paste(getwd(), paste(paste("Clusters", p, sep="/"), ".csv", sep="_pca_scores"), sep="/"))
}
fw <- get.data.w_cluster("FW", km.models[[3]])
mf <- get.data.w_cluster("MF", km.models[[2]])
df <- get.data.w_cluster("DF", km.models[[1]])
view.cluster.df(fw, 1)
view.cluster.df(df, 1)
view.cluster.df(df, 2)
view.cluster.df(df, 3)
view.cluster.df(df, 4)
view.cluster.df(df, 5)
view.cluster.df(df, 6)
view.cluster.df(df, 7)
view.cluster.df(mf, 1)
view.cluster.df(mf, 3)
view.cluster.df(mf, 2)
view.cluster.df(mf, 9)
view.cluster.df(mf, 11)
abs(-1)
view.cluster.df(mf, 6)
view.cluster.df(mf, 4)
view.cluster.df(mf, 8)
view.cluster.df(mf, 9)
view.cluster.df(mf, 5)
view.cluster.df(mf, 10)
for (i in 1:3) {
dtfrm <- c(df, mf, fw)[i]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
df %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
for (i in 1:3) {
dtfrm <- c(df, mf, fw)[i]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
unique(dtfrm$cluster
)
for (i in 1:3) {
dtfrm <- list(df, mf, fw)[[i]]
p <- c("DF", "MF", "FW")[i]
for (c in unique(dtfrm$cluster)) {
write.csv(
dtfrm %>% filter(cluster==c) %>% select(Player,Squad,Nation,Starts,PCA1,PCA2,cluster),
paste(getwd(), paste(paste(paste("Clusters", p, sep="/"), c, sep="/"), ".csv", sep="_cluster"), sep="/")
)
}
}
